buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}
apply plugin: 'forge'

//Assumes this and all related projects are JDK 8 based
allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


//Loads the versions numbers from build.properties, this means most changes can be done there and not here.
file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

//This adds a git commit dependent appendage to the file name
//Helps to differentiate artefacts if you don't up the version.
static def getVersionAppendage() {
    def proc = "git rev-parse --short HEAD".execute()
    proc.waitFor()
    return "DEV." + proc.exitValue() ? proc.text.trim() : "GITBORK"
}

//Loads configs from build.properties
ext.modid = "${config.project_modid}"
ext.modname = "${config.project_name}"
ext.modversion = "${config.project_version}"
//Should follow: http://maven.apache.org/guides/mini/guide-naming-conventions.html
group = "${config.project_group}"
//Follows modid by default, name of the *.jar
archivesBaseName = "${config.project_modid}"
//Appended to the end of the *.jar after archivesBaseName
version = "1.7.10-" + modversion + "-" + getVersionAppendage()

minecraft {
    //Version of Forge Mod Loader to use
    version = "1.7.10-10.13.4.1614-1.7.10"
    //Directory where runClient or runServer executes from
    runDir = "run"
    //
    replaceIn "src/main/java/com/github/basdxz/examplemod/Reference.java"
    replace "@MODID@", modid
    replace "@NAME@", modname
    replace "@VERSION@", "${config.project_version}"
}


/**
 * You may put jars on which you depend on in ./libs to build and use during runClient
 * You will have to manually right click these and select 'Add Library'
 * Additionally, on first reference these will need to be added to your classpath which Intellij will tell you about.
 *
 * If you wish to use Maven or Ivy repositories, you may define dependencies as shown:
 *
 * For Maven:
 * compile "some.group:artifact:version:classifier"
 * compile "some.group:artifact:version"
 *
 * For Ivy:
 * compile name: 'name', version: 'version', ext: 'jar'
 *
 * Some real world examples include:
 *
 * For Maven:
 * compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev environment
 * compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev environment
 *
 * For Ivy:
 * compile name: 'CoFHCore', version: '[1.7.10]3.1.4-329-dev', ext: 'jar'
 *
 * For more information visit:
 * http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
 * http://www.gradle.org/docs/current/userguide/dependency_management.html
 *
 * You may also use compileOnly in place of compile, this lets you build against a library but does not include
 * it when runClient or similar are used. Finally, if you wish to test against a different library than that which
 * you build against, add them to the: ./run/mods/ directory (created on first start) to be loaded on runClient
 */
dependencies {
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'modid', project.modid
    inputs.property 'name', project.modname
    inputs.property 'version', project.modversion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version
        expand 'modid':project.modid, 'name':project.modname, 'version':project.modversion
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
